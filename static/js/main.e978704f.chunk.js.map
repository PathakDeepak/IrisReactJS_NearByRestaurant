{"version":3,"sources":["components/Restaurant.component.jsx","components/CityChooseForm.component.jsx","redux/rest.action.js","pages/HomePage/HomePage.component.jsx","App.js","reportWebVitals.js","redux/rest.reducer.js","redux/rootReducer.js","store.js","index.js"],"names":["Restaurant","key","name","image","locality","address","cuisines","cost","rating","votes","rating_color","className","alt","src","style","backgroundColor","CityChooseForm","useState","id","setId","search","setSearch","query","setQuery","dispatch","useDispatch","useEffect","getRestaurants","a","fetch","method","headers","Accept","response","json","data","type","payload","restaurants","onSubmit","e","preventDefault","onChange","target","value","hidden","placeholder","HomePage","restaurant","useSelector","state","saveTheRestaurant","initialState","map","rest","thumb","location","average_cost_for_two","user_rating","aggregate_rating","rating_obj","bg_color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","console","log","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e978704f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Restaurant.styles.css\";\r\n\r\nconst Restaurant = ({\r\n  key,\r\n  name,\r\n  image,\r\n  locality,\r\n  address,\r\n  cuisines,\r\n  cost,\r\n  rating,\r\n  votes,\r\n  rating_color,\r\n}) => {\r\n  return (\r\n    <div className=\"restaurant-tile\">\r\n      <img alt=\"\" src={image} className=\"rest-img\" />\r\n      <div className=\"rest-rating\">\r\n        <p style={{ backgroundColor: `${rating_color}` }}>{rating}</p>\r\n        <div>{votes} votes</div>\r\n      </div>\r\n      <div className=\"rest-details\">\r\n        <h2 className=\"rest-name\">{name}</h2>\r\n        <div className=\"rest-loc\">{locality}</div>\r\n        <div className=\"rest-add\">{address}</div>\r\n        <hr />\r\n        <div className=\"rest-cusines\">\r\n          <strong>CUISINES:</strong> {cuisines}\r\n        </div>\r\n        <div className=\"rest-cost\">\r\n          <strong>COST FOR TWO:</strong> Rs.{cost}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Restaurant;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {saveRestaurant} from '../redux/rest.action';\r\nimport \"./CityChooseForm.styles.css\";\r\n\r\nconst CityChooseForm = () => {\r\n  //const [restaurant, setRest] = useState([]);\r\n  const [id, setId] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState([0, \"\"]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getRestaurants();\r\n  }, [query]);\r\n\r\n  const getRestaurants = async () => {\r\n    if (!(query[0] === 0 && query[1] === \"\")) {\r\n      const response = await fetch(\r\n        `https://developers.zomato.com/api/v2.1/search?entity_id=${query[0]}&entity_type=city&q=${query[1]}&count=10`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"user-key\": \"2ad63f94902019632381f2df301a60cc\",\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      dispatch(saveRestaurant(data.restaurants));\r\n    }\r\n  };\r\n\r\n  //custom hook\r\n\r\n  const updateID = (e) => {\r\n    setId(e.target.value);\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery([id, search]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"searchBar\" onSubmit={getSearch}>\r\n        <div>\r\n          <select\r\n            id=\"select_id\"\r\n            className=\"city form-control\"\r\n            onChange={updateID}\r\n          >\r\n            <option value=\"0\" hidden>\r\n              Select City\r\n            </option>\r\n            <option value=\"1\">Delhi</option>\r\n            <option value=\"3\">Mumbai</option>\r\n            <option value=\"4\">Bengaluru</option>\r\n            <option value=\"5\">Pune</option>\r\n\r\n            <option value=\"6\">Hyderabad</option>\r\n          </select>\r\n          <input\r\n            id=\"getText\"\r\n            type=\"text\"\r\n            className=\"restaurant\"\r\n            placeholder=\"Search for Restaurant\"\r\n            onChange={updateSearch}\r\n          />\r\n          <button id=\"getMessage\" className=\"search-btn\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityChooseForm;\r\n","export const saveRestaurant = (rest) => ({\r\n    type: 'SAVE_RESTAURANT',\r\n    payload: rest\r\n});\r\n\r\n\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport \"./HomePage.styles.css\";\r\n\r\nimport Restaurant from \"../../components/Restaurant.component\";\r\nimport CityChooseForm from '../../components/CityChooseForm.component';\r\n\r\nconst HomePage = () => {\r\n  let restaurant = useSelector((state) => state.saveTheRestaurant);\r\n  if(restaurant.initialState){\r\n    restaurant = restaurant.initialState\r\n  }\r\n  return (\r\n    <div className=\"homepage\" >\r\n      <div className=\"foodJoint\" data-testid='todo-1'>\r\n        <h1>Best Restaurant Near You</h1>\r\n        <CityChooseForm />\r\n      </div>\r\n\r\n      {restaurant.map((rest) => (\r\n        <Restaurant\r\n          key={rest.restaurant.id}\r\n          name={rest.restaurant.name}\r\n          image={rest.restaurant.thumb}\r\n          locality={rest.restaurant.location.locality}\r\n          address={rest.restaurant.location.address}\r\n          cuisines={rest.restaurant.cuisines}\r\n          cost={rest.restaurant.average_cost_for_two}\r\n          rating={rest.restaurant.user_rating.aggregate_rating}\r\n          votes={rest.restaurant.user_rating.votes}\r\n          rating_color={rest.restaurant.user_rating.rating_obj.bg_color.type}\r\n        />\r\n      ))}\r\n      \r\n    </div>\r\n  );}\r\n\r\n\r\nexport default HomePage;\r\n","import './App.css';\r\n\r\nimport HomePage from './pages/HomePage/HomePage.component';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <HomePage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState =[];\r\n\r\nconst saveTheRestaurant = (state = initialState, action) => {\r\n        switch(action.type) {\r\n            case 'SAVE_RESTAURANT': \r\n                console.log(action.payload)\r\n                return{\r\n                    ...state,\r\n                    initialState: action.payload\r\n                }\r\n\r\n            default: return state;    \r\n        }\r\n}\r\n\r\nexport default saveTheRestaurant;","import saveTheRestaurant from './rest.reducer';\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    saveTheRestaurant\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\n\r\nimport rootReducer from \"./redux/rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"../src/store\";\r\n\r\n//connect the app to the router library\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}